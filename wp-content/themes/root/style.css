@charset "CP850";
/*! normalize.css v3.0.0 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8+, and Opera
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

/*------------------------------------*\
    $CSSWIZARDRY-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */
/*------------------------------------*\
    $INTRODUCTION
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * child     --  child-based devices, like phones and small tablets
 * teen      --  teen-based devices, like iPads or teentops
 * adult --  all of the above
 * mama     --  stationary devices, like mamatop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  teen--one-half  mama--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a teen
 * device, at which point it become 50% wide, or it is on a mamatop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  teen--one-half  mama--one-third  push--mama--one-third"`
 *
   `class="grid__item  one-quarter  child--one-half  push--child--one-half"`
 *
   `class="grid__item  child--one-third  mama--five-twelfths"`
 */
/*------------------------------------*\
    $VARIABLES
\*------------------------------------*/
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
/**
 * Would you like push and pull classes enabled?
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.child--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, mama, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all.
 *
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.grid {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -24px;
  /* [3] */
}

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.grid__item {
  display: inline-block;
  /* [1] */
  padding-left: 24px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  width: 100%;
  /* [4] */
  /* [5] */
  /* [5] */
  box-sizing: border-box;
  /* [5] */
}

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
  direction: rtl;
  text-align: left;
}
.grid--rev > .grid__item {
  direction: ltr;
  text-align: left;
}

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
.grid--full {
  margin-left: 0;
}
.grid--full > .grid__item {
  padding-left: 0;
}

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
.grid--right {
  text-align: right;
}
.grid--right > .grid__item {
  text-align: left;
}

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
.grid--center {
  text-align: center;
}
.grid--center > .grid__item {
  text-align: left;
}

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
.grid--middle > .grid__item {
  vertical-align: middle;
}

.grid--bottom > .grid__item {
  vertical-align: bottom;
}

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
.grid--narrow {
  margin-left: -12px;
}
.grid--narrow > .grid__item {
  padding-left: 12px;
}

/**
 * Create grids with wider gutters. Extends `.grid`.
 */
.grid--wide {
  margin-left: -48px;
}
.grid--wide > .grid__item {
  padding-left: 48px;
}

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
 * Whole
 */
.one-whole {
  width: 100%;
}

/**
 * Halves
 */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%;
}

/**
 * Thirds
 */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%;
}

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%;
}

/**
 * Quarters
 */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%;
}

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%;
}

/**
 * Fifths
 */
.one-fifth, .two-tenths {
  width: 20%;
}

.two-fifths, .four-tenths {
  width: 40%;
}

.three-fifths, .six-tenths {
  width: 60%;
}

.four-fifths, .eight-tenths {
  width: 80%;
}

/**
 * Sixths
 */
.one-sixth, .two-twelfths {
  width: 16.666%;
}

.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
 * Eighths
 */
.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
 * Tenths
 */
.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
 * Twelfths
 */
.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (min-width: 37.5em) {
  /**
   * Whole
   */
  .child--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .child--one-half, .child--two-quarters, .child--three-sixths, .child--four-eighths, .child--five-tenths, .child--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .child--one-third, .child--two-sixths, .child--four-twelfths {
    width: 33.333%;
  }

  .child--two-thirds, .child--four-sixths, .child--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .child--one-quarter, .child--two-eighths, .child--three-twelfths {
    width: 25%;
  }

  .child--three-quarters, .child--six-eighths, .child--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .child--one-fifth, .child--two-tenths {
    width: 20%;
  }

  .child--two-fifths, .child--four-tenths {
    width: 40%;
  }

  .child--three-fifths, .child--six-tenths {
    width: 60%;
  }

  .child--four-fifths, .child--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .child--one-sixth, .child--two-twelfths {
    width: 16.666%;
  }

  .child--five-sixths, .child--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .child--one-eighth {
    width: 12.5%;
  }

  .child--three-eighths {
    width: 37.5%;
  }

  .child--five-eighths {
    width: 62.5%;
  }

  .child--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .child--one-tenth {
    width: 10%;
  }

  .child--three-tenths {
    width: 30%;
  }

  .child--seven-tenths {
    width: 70%;
  }

  .child--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .child--one-twelfth {
    width: 8.333%;
  }

  .child--five-twelfths {
    width: 41.666%;
  }

  .child--seven-twelfths {
    width: 58.333%;
  }

  .child--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 48em) {
  /**
   * Whole
   */
  .teen--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .teen--one-half, .teen--two-quarters, .teen--three-sixths, .teen--four-eighths, .teen--five-tenths, .teen--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .teen--one-third, .teen--two-sixths, .teen--four-twelfths {
    width: 33.333%;
  }

  .teen--two-thirds, .teen--four-sixths, .teen--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .teen--one-quarter, .teen--two-eighths, .teen--three-twelfths {
    width: 25%;
  }

  .teen--three-quarters, .teen--six-eighths, .teen--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .teen--one-fifth, .teen--two-tenths {
    width: 20%;
  }

  .teen--two-fifths, .teen--four-tenths {
    width: 40%;
  }

  .teen--three-fifths, .teen--six-tenths {
    width: 60%;
  }

  .teen--four-fifths, .teen--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .teen--one-sixth, .teen--two-twelfths {
    width: 16.666%;
  }

  .teen--five-sixths, .teen--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .teen--one-eighth {
    width: 12.5%;
  }

  .teen--three-eighths {
    width: 37.5%;
  }

  .teen--five-eighths {
    width: 62.5%;
  }

  .teen--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .teen--one-tenth {
    width: 10%;
  }

  .teen--three-tenths {
    width: 30%;
  }

  .teen--seven-tenths {
    width: 70%;
  }

  .teen--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .teen--one-twelfth {
    width: 8.333%;
  }

  .teen--five-twelfths {
    width: 41.666%;
  }

  .teen--seven-twelfths {
    width: 58.333%;
  }

  .teen--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 64em) {
  /**
   * Whole
   */
  .adult--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .adult--one-half, .adult--two-quarters, .adult--three-sixths, .adult--four-eighths, .adult--five-tenths, .adult--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .adult--one-third, .adult--two-sixths, .adult--four-twelfths {
    width: 33.333%;
  }

  .adult--two-thirds, .adult--four-sixths, .adult--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .adult--one-quarter, .adult--two-eighths, .adult--three-twelfths {
    width: 25%;
  }

  .adult--three-quarters, .adult--six-eighths, .adult--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .adult--one-fifth, .adult--two-tenths {
    width: 20%;
  }

  .adult--two-fifths, .adult--four-tenths {
    width: 40%;
  }

  .adult--three-fifths, .adult--six-tenths {
    width: 60%;
  }

  .adult--four-fifths, .adult--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .adult--one-sixth, .adult--two-twelfths {
    width: 16.666%;
  }

  .adult--five-sixths, .adult--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .adult--one-eighth {
    width: 12.5%;
  }

  .adult--three-eighths {
    width: 37.5%;
  }

  .adult--five-eighths {
    width: 62.5%;
  }

  .adult--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .adult--one-tenth {
    width: 10%;
  }

  .adult--three-tenths {
    width: 30%;
  }

  .adult--seven-tenths {
    width: 70%;
  }

  .adult--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .adult--one-twelfth {
    width: 8.333%;
  }

  .adult--five-twelfths {
    width: 41.666%;
  }

  .adult--seven-twelfths {
    width: 58.333%;
  }

  .adult--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 68.75em) {
  /**
   * Whole
   */
  .mama--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .mama--one-half, .mama--two-quarters, .mama--three-sixths, .mama--four-eighths, .mama--five-tenths, .mama--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .mama--one-third, .mama--two-sixths, .mama--four-twelfths {
    width: 33.333%;
  }

  .mama--two-thirds, .mama--four-sixths, .mama--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .mama--one-quarter, .mama--two-eighths, .mama--three-twelfths {
    width: 25%;
  }

  .mama--three-quarters, .mama--six-eighths, .mama--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .mama--one-fifth, .mama--two-tenths {
    width: 20%;
  }

  .mama--two-fifths, .mama--four-tenths {
    width: 40%;
  }

  .mama--three-fifths, .mama--six-tenths {
    width: 60%;
  }

  .mama--four-fifths, .mama--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .mama--one-sixth, .mama--two-twelfths {
    width: 16.666%;
  }

  .mama--five-sixths, .mama--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .mama--one-eighth {
    width: 12.5%;
  }

  .mama--three-eighths {
    width: 37.5%;
  }

  .mama--five-eighths {
    width: 62.5%;
  }

  .mama--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .mama--one-tenth {
    width: 10%;
  }

  .mama--three-tenths {
    width: 30%;
  }

  .mama--seven-tenths {
    width: 70%;
  }

  .mama--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .mama--one-twelfth {
    width: 8.333%;
  }

  .mama--five-twelfths {
    width: 41.666%;
  }

  .mama--seven-twelfths {
    width: 58.333%;
  }

  .mama--eleven-twelfths {
    width: 91.666%;
  }
}
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
@media print {
  * {
    background: transparent !important;
    color: #000 !important;
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]:after {
    content: " (" attr(href) ")";
  }

  abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .ir a:after,
  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: "";
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  thead {
    display: table-header-group;
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100% !important;
  }

  @page {
    margin: 0.5cm;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}
*, *:after, *:before {
  box-sizing: border-box;
  font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  outline: none;
}

html {
  font-family: 'PT Sans';
  font-weight: 400;
}
html.style-guide {
  background-color: #DFDFDF;
}

body {
  font-size: 1.0625em;
  line-height: 1.411764706em;
  color: #1a1a1a;
  margin: 0;
  padding: 0;
}
body > .wrapper {
  width: 90%;
  max-width: 764px;
  margin: 0 auto;
}
body.style-guide-body {
  width: 90%;
  max-width: 764px;
  margin: 0 auto;
  padding-top: 50px;
  background-color: white;
}

ul, li {
  list-style: none;
  margin: 0;
  padding: 0;
}

/* Sanitation */
hr {
  border: 1px solid;
  margin: -1px 0;
}

ul ul, ol ol, ul ol, ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

b, strong, em, small, code {
  line-height: 1;
}

sup, sub {
  vertical-align: baseline;
  position: relative;
  top: -0.4em;
}

sub {
  top: 0.4em;
}

h1, h2, .h1, .h2, .post__subtitle {
  font-family: 'Lato';
  font-weight: 700;
  letter-spacing: -1px;
  text-transform: uppercase;
}

h3, h4, h5, .h3, .h4, .h5 {
  font-family: 'Lato';
  font-weight: 400;
}

h1, .h1 {
  font-size: 3.529411765em;
  line-height: 1.02em;
  margin-top: 0.68em;
  margin-bottom: 0.34em;
}
h1:after, .h1:after {
  content: '';
  display: block;
  width: 110px;
  margin: 20px 0;
  border-bottom: 10px solid #1a1a1a;
}

h2, .h2, .post__subtitle {
  font-size: 1.882352941em;
  line-height: 1.5em;
  margin-top: 0.75em;
  margin-bottom: 0.75em;
  letter-spacing: 1px;
}
h2:after, .h2:after, .post__subtitle:after {
  content: '';
  display: block;
  width: 110px;
  margin: 10px 0;
  border-bottom: 5px solid #1a1a1a;
}

h3, .h3 {
  font-size: 1.5em;
  line-height: 1.2em;
  margin-top: 0.6em;
  margin-bottom: 0.6em;
  text-transform: uppercase;
  letter-spacing: 1px;
}
h3:after, .h3:after {
  border-bottom: 0;
}

h4, .h4 {
  font-size: 1em;
  line-height: 1.411764706em;
  margin-top: 1.411764706em;
  margin-bottom: 1.411764706em;
}

p, ul, ol, pre, table, blockquote {
  font-family: 'PT Sans';
  font-weight: 400;
  margin-top: 1.41176471em;
  margin-bottom: 1.41176471em;
}

a {
  text-decoration: none;
  color: #1a1a1a;
}

.logo {
  width: 100%;
  text-align: center;
}
.logo__text {
  font-size: 85px;
  line-height: 137.53288915px;
  font-size: 5rem;
  line-height: 8.09016995rem;
  font-family: 'Lato';
  font-weight: 900;
  line-height: 3em;
  text-transform: lowercase;
  color: #1a1a1a;
}

.nav {
  border-bottom: 10px solid #1a1a1a;
  margin-bottom: 10px;
}
.nav > ul {
  display: table;
  width: 100%;
  margin: 10px 0;
}
@media (min-width: 48em) {
  .nav > ul {
    display: -webkit-flex;
    display: flex;
    -webkit-justify-content: space-between;
            justify-content: space-between;
  }
}
.nav .menu-item > a {
  font-size: 22.1px;
  line-height: 35.758551179px;
  font-size: 1.3rem;
  line-height: 2.103444187rem;
  font-family: 'Lato';
  font-weight: 900;
  text-transform: uppercase;
  color: #1a1a1a;
}

.post {
  border-bottom: 5px dotted black;
  margin-bottom: 2em;
  padding-bottom: 1em;
}
.post__featured-image {
  width: 100%;
  max-width: 764px;
}
.post__date {
  font-size: 17px;
  line-height: 27.50657783px;
  font-size: 1rem;
  line-height: 1.61803399rem;
  line-height: 40px;
  line-height: 2.5rem;
  font-style: italic;
  color: #1a1a1a;
  text-transform: uppercase;
}
.post__title {
  margin-top: 0;
}
.post__subtitle {
  margin: 50px 0 40px 0;
}
.post__section {
  margin-bottom: 40px;
}
.post ul > li {
  margin-bottom: 0.7em;
  font-style: italic;
  letter-spacing: 1px;
}
.post img {
  max-width: 100%;
  height: auto;
}

ol {
  counter-reset: li;
  padding: 0;
}
ol > li {
  position: relative;
  margin: 0 0 30px 55px;
  list-style: none;
  line-height: 30px;
}
ol > li:before {
  font-family: 'Lato';
  font-weight: 700;
  font-size: 34px;
  line-height: 55.01315566px;
  font-size: 2rem;
  line-height: 3.23606798rem;
  position: absolute;
  left: -54px;
  width: 30px;
  text-align: center;
  border-bottom: 5px solid #000;
  line-height: 47.013156px;
  line-height: 2.836068rem;
  content: counter(li);
  counter-increment: li;
}
